version: "3.3"
services:

    proxy:
        image: traefik:v2.2
        networks:
            - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
            - default
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        command:
            - --providers.docker
            - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
            - --providers.docker.exposedbydefault=false
            - --providers.docker.swarmmode
            - --accesslog
            - --log
            - --api
        deploy:
            placement:
                constraints:
                    - node.role == manager
            labels:
                - traefik.enable=true
                - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
                - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
                - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.scheme=https
                - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.permanent=true
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.entrypoints=http
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.entrypoints=https
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls=true
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls.certresolver=le
                - traefik.http.services${STACK_NAME?Variable not set}-proxy.loadbalancer.server.port=80
                - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
                - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.middlewares=${STACK_NAME?Variable not set}-www-redirect,${STACK_NAME?Variable not set}-https-redirect
    
    backend:
        build: 
            context: .
            args:
                INSTALL_DEV: "true"
        depends_on:
            - db
        env_file: 
            - .env
        environment: 
            - SERVER_NAME=${DOMAIN?Variable not set}
            - SERVER_HOST=https://${DOMAIN?Variable not set}

    db:
        image: postgres:12
        volumes:
            - app-db-data:/var/lib/postgresql/data/pgdata
        env_file:
            - .env
        environment:
            - PGDATA=/var/lib/postgresql/data/pgdata

    pgadmin:
        image: dpage/pgadmin4
        networks:
            - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
            - default
        depends_on:
            - db
        env_file: 
            - .env

volumes: 
    app-db-data:

networks:
    traefik-public:
        external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
